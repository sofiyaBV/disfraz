services:
  cosplay.api:
    container_name: cosplay.api
    build:
      context: ./back
    ports:
      - "3333:3000"
    networks:
      - app

  cosplay.db:
    image: postgres:17.3
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./data/db:/var/lib/postgresql/data
    networks:
      - app
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx.shield.conf:/etc/nginx/nginx.conf
    ports:
      - "8081:81"
      - "8082:82"
    depends_on:
      - cosplay.api
    networks:
      - app
    labels:
      loki: 'true'
  redis:
    image: redis:latest
    restart: always
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    ports:
      - "6378:6379"
    networks:
      - app
    labels:
      loki: 'true'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}


  # TODO: endpoint /metrics for prometheus metrics. In a nutshell prometheus will ping this endpoint and scrape the metrics.Later you'll be able to watch the metrics in grafana, or right in prometeus UI located at 9000 port. -Nya ٩(◕‿◕｡)۶ 
  # research about this technical endpoint in the google if you aren't a dumb you will find the information related. 
  # Of course i could make it myself, but i'm lazy and i don't want to do it. Moreover, it's a big deal for me to dig that fuckin typescript code, generally i'm golang dev and i've fucked up that fuckin typescript.
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - nginx-exporter
    networks:
      - app

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/dashboards/:/etc/grafana/provisioning/dashboards/
      - ./grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
    depends_on:
      - prometheus
      - loki
    networks:
      - app
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    ports:
      - "9113:9113"
    command: >
      -nginx.scrape-uri http://nginx:82/nginx_status
      -web.listen-address :9113
      -web.telemetry-path /metrics
    depends_on:
      - nginx
    networks:
      - app

  loki:
    image: grafana/loki:2.8.2
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app
    user: "root"


  promtail:
    image: grafana/promtail:2.8.2
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/promtail.yaml
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      - loki
    networks:
      - app

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - app

networks:
  app:
    driver: bridge