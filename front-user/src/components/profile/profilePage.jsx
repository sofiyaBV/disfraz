import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styles from "../../style/profile/profile.module.css";
import ButtonGeneral from "../buttons/ButtonGeneral";
import dataProvider from "../../utils/dataProvider";
import { useAuth } from "../../utils/AuthContext";
import Header from "../header/Header";

const ProfilePage = () => {
  const { token, logout, isLoading: authLoading, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const [activeSection, setActiveSection] = useState("profile");
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  const [userProfile, setUserProfile] = useState({
    email: "",
    phone: "",
    createdAt: "",
    roles: [],
  });

  const [editForm, setEditForm] = useState({
    email: "",
    phone: "",
    password: "",
    confirmPassword: "",
  });

  const [formErrors, setFormErrors] = useState({});

  const menuItems = [
    { id: "profile", icon: "üë§", label: "–ú–û–á –î–ê–ù–Ü", active: true },
    { id: "address", icon: "üìç", label: "–ê–î–†–ï–°–ê" },
    { id: "favorites", icon: "üñ§", label: "–û–ë–†–ê–ù–Ü –¢–û–í–ê–†–ò" },
    { id: "history", icon: "üìã", label: "–Ü–°–¢–û–†–Ü–Ø –ü–û–ö–£–ü–û–ö" },
    { id: "bonuses", icon: "üí∞", label: "–ë–û–ù–£–°–ò" },
    { id: "password", icon: "üîí", label: "–ó–ú–Ü–ù–ò–¢–ò –ü–ê–†–û–õ–¨" },
    { id: "logout", icon: "üì§", label: "–í–ò–•–Ü–î" },
  ];

  useEffect(() => {
    console.log(
      "ProfilePage useEffect - authLoading:",
      authLoading,
      "token:",
      token,
      "isAuthenticated:",
      isAuthenticated
    );

    if (authLoading) {
      return;
    }

    if (!token) {
      console.log("No token found, redirecting to registration");
      navigate("/");
      return;
    }

    console.log("Token found, fetching profile");
    fetchUserProfile();
  }, [token, authLoading, isAuthenticated, navigate]);

  const fetchUserProfile = async () => {
    try {
      setIsLoading(true);
      setError(null);

      console.log("Fetching user profile...");
      const response = await dataProvider.getOne("user/profile");
      console.log("Profile response:", response);

      setUserProfile(response.data);
      setEditForm({
        email: response.data.email || "",
        phone: response.data.phone || "",
        password: "",
        confirmPassword: "",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");

      if (error.response?.status === 401) {
        console.log("401 error, logging out");
        logout();
        navigate("/");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleMenuClick = (itemId) => {
    if (itemId === "logout") {
      handleLogout();
      return;
    }
    setActiveSection(itemId);
    setError(null);
    setSuccessMessage(null);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditForm((prev) => ({
      ...prev,
      [name]: value,
    }));

    if (formErrors[name]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validateForm = () => {
    const errors = {};

    if (!editForm.email.trim()) {
      errors.email = "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (!/\S+@\S+\.\S+/.test(editForm.email)) {
      errors.email = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email";
    }

    if (editForm.phone && !/^\+?3?8?(0\d{9})$/.test(editForm.phone)) {
      errors.phone = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É";
    }

    if (editForm.password) {
      if (editForm.password.length < 6) {
        errors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤";
      }
      if (editForm.password !== editForm.confirmPassword) {
        errors.confirmPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å";
      }
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setError(null);
    setSuccessMessage(null);

    try {
      const updateData = {
        email: editForm.email,
        phone: editForm.phone || null,
      };

      if (editForm.password) {
        updateData.password = editForm.password;
      }

      const response = await dataProvider.update("user/profile", {
        data: updateData,
      });

      setUserProfile(response.data);
      setIsEditing(false);
      setSuccessMessage("–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");

      setEditForm((prev) => ({
        ...prev,
        password: "",
        confirmPassword: "",
      }));

      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      setError(
        error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleLogout = () => {
    logout();
    navigate("/");
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString("uk-UA");
  };

  const renderProfileContent = () => {
    if (activeSection !== "profile") {
      return (
        <div className={styles.contentPlaceholder}>
          <h3>
            –†–æ–∑–¥—ñ–ª "{menuItems.find((item) => item.id === activeSection)?.label}
            " –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ
          </h3>
          <p>–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ</p>
        </div>
      );
    }

    return (
      <div className={styles.contentArea}>
        {error && <div className={styles.errorMessage}>{error}</div>}
        {successMessage && (
          <div className={styles.successMessage}>{successMessage}</div>
        )}

        <div className={styles.profileForm}>
          <div className={styles.formGrid}>
            <div className={styles.formGroup}>
              <label className={styles.formLabel}>–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                type="tel"
                name="phone"
                value={editForm.phone}
                onChange={handleInputChange}
                className={`${styles.formInput} ${
                  formErrors.phone ? styles.error : ""
                }`}
                placeholder="+38 (___) ___-__-__"
              />
              {formErrors.phone && (
                <span className={styles.formError}>{formErrors.phone}</span>
              )}
            </div>

            <div className={styles.formGroup}>
              <label className={styles.formLabel}>Email</label>
              <input
                type="email"
                name="email"
                value={editForm.email}
                onChange={handleInputChange}
                className={`${styles.formInput} ${
                  formErrors.email ? styles.error : ""
                }`}
                required
              />
              {formErrors.email && (
                <span className={styles.formError}>{formErrors.email}</span>
              )}
            </div>

            <div className={styles.formGroup + " " + styles.fullWidth}>
              <label className={styles.formLabel}>
                –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
              </label>
              <input
                type="tel"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                className={styles.formInput}
              />
              <small className={styles.helpText}>
                –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∫–æ–¥, —â–æ–± –º–∏ —Ç–µ–ø–µ—Ä –≤–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ü–µ–π —è–∫ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä
                —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª–µ–π
              </small>
            </div>
          </div>

          <div className={styles.submitArea}>
            <button
              type="button"
              onClick={handleSaveProfile}
              disabled={isSubmitting}
              className={styles.submitButton}
            >
              {isSubmitting ? "–ó–ë–ï–†–Ü–ì–ê–Ñ–¢–¨–°–Ø..." : "–ó–ë–ï–†–ï–ì–¢–ò –ü–†–û–§–Ü–õ–¨"}
            </button>
          </div>
        </div>
      </div>
    );
  };

  if (authLoading) {
    return (
      <div className={styles.profileContainer}>
        <div className={styles.loadingSpinner}>–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...</div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className={styles.profileContainer}>
        <div className={styles.loadingSpinner}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...</div>
      </div>
    );
  }

  return (
    <div className={styles.profileContainer}>
      {/* Header */}
      <div className={styles.header}>
        <div className={styles.headerLogo}>
          <div className={styles.logoIcon}>D</div>
          <span className={styles.logoText}>DISFRAZ</span>
        </div>

        <div className={styles.breadcrumb}>
          <span>–ú–Ü–ô –ê–ö–ê–£–ù–¢</span>
          <span>/</span>
          <span>–ú–û–á –î–ê–ù–Ü</span>
          <span>/</span>
        </div>
      </div>

      {/* Sidebar */}
      <div className={styles.sidebar}>
        <div className={styles.sidebarHeader}>
          <h2 className={styles.sidebarTitle}>–ú–Ü–ô –ê–ö–ê–£–ù–¢</h2>
        </div>

        <nav className={styles.sidebarNav}>
          {menuItems.map((item) => (
            <button
              key={item.id}
              onClick={() => handleMenuClick(item.id)}
              className={`${styles.menuItem} ${
                activeSection === item.id ? styles.active : ""
              }`}
            >
              <span className={styles.menuIcon}>{item.icon}</span>
              <span>{item.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Main Content */}
      <div className={styles.mainContent}>{renderProfileContent()}</div>
    </div>
  );
};

export default ProfilePage;
