import React, { useState } from "react";
import styles from "../../style/pagesStyle/registration.module.css";
import ButtonGeneral from "../buttons/ButtonGeneral";
import dataProvider from "../../utils/dataProvider";
import { useAuth } from "../../utils/AuthContext";

const RegistrationForm = () => {
  const { login } = useAuth(); // –î–æ–±–∞–≤–ª—è–µ–º useAuth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [method, setMethod] = useState("phone");
  const [formData, setFormData] = useState({
    phone: "",
    email: "",
    password: "",
    confirmPassword: "",
    agree: false,
    loginLater: false,
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [serverError, setServerError] = useState(null);
  const [serverMessage, setServerMessage] = useState(null);

  const handleMethodChange = (e) => {
    setMethod(e.target.value);
    setErrors({});
    setServerError(null);
    setServerMessage(null);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const validateForm = () => {
    const newErrors = {};
    if (method === "phone") {
      if (!formData.phone) {
        newErrors.phone = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
      } else if (!/^\+?3?8?(0\d{9})$/.test(formData.phone)) {
        newErrors.phone = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É";
      }
    } else {
      if (!formData.email) {
        newErrors.email = "E-mail –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
      } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
        newErrors.email = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç e-mail";
      }
    }
    if (!formData.password) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (formData.password.length < 6) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤";
    }
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å";
    }
    if (!formData.agree) {
      newErrors.agree = "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ —É–º–æ–≤–∞–º–∏";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setIsSubmitting(true);
    setServerError(null);
    setServerMessage(null);

    try {
      const requestData = {
        email: method === "email" ? formData.email : "",
        phone: method === "phone" ? formData.phone : "",
        password: formData.password,
      };

      const response = await dataProvider.create("users", {
        data: requestData,
      });
      console.log("Registration successful:", response.data);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º access_token –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const token = response.data.access_token;
      if (token) {
        login(token); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setServerMessage(
          "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
        );
      } else {
        setServerMessage("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –∞–ª–µ —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π.");
      }

      setFormData({
        phone: "",
        email: "",
        password: "",
        confirmPassword: "",
        agree: false,
        loginLater: false,
      });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
      setServerError(
        error.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>
      <p className={styles.subtitle}>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó</p>
      <div className={styles.methodOptions}>
        <label className={styles.methodLabel}>
          <input
            type="radio"
            value="phone"
            checked={method === "phone"}
            onChange={handleMethodChange}
            className={styles.radio}
          />
          –ó–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        </label>
        <label className={styles.methodLabel}>
          <input
            type="radio"
            value="email"
            checked={method === "email"}
            onChange={handleMethodChange}
            className={styles.radio}
          />
          –ü–æ e-mail
        </label>
      </div>
      <form onSubmit={handleSubmit} className={styles.form}>
        {method === "phone" ? (
          <div className={styles.inputGroup}>
            <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
            <input
              type="text"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              className={errors.phone ? styles.inputError : styles.input}
              placeholder="38 (___) ___-__-__"
            />
            {errors.phone && (
              <span className={styles.error}>{errors.phone}</span>
            )}
          </div>
        ) : (
          <div className={styles.inputGroup}>
            <label htmlFor="email">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className={errors.email ? styles.inputError : styles.input}
              placeholder=""
            />
            {errors.email && (
              <span className={styles.error}>{errors.email}</span>
            )}
          </div>
        )}
        <div className={styles.inputGroup}>
          <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
          <div className={styles.passwordWrapper}>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className={errors.password ? styles.inputError : styles.input}
              placeholder=""
            />
            <span className={styles.eyeIcon}>üëÅÔ∏è</span>
          </div>
          {errors.password && (
            <span className={styles.error}>{errors.password}</span>
          )}
        </div>
        <div className={styles.inputGroup}>
          <label htmlFor="confirmPassword">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</label>
          <div className={styles.passwordWrapper}>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              className={
                errors.confirmPassword ? styles.inputError : styles.input
              }
              placeholder=""
            />
            <span className={styles.eyeIcon}>üëÅÔ∏è</span>
          </div>
          {errors.confirmPassword && (
            <span className={styles.error}>{errors.confirmPassword}</span>
          )}
        </div>
        <div className={styles.checkboxGroup}>
          <label className={styles.checkboxLabel}>
            <input
              type="checkbox"
              name="loginLater"
              checked={formData.loginLater}
              onChange={handleChange}
              className={styles.checkbox}
            />
            <span>–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É</span>
          </label>
        </div>
        <div className={styles.checkboxGroup}>
          <label className={styles.checkboxLabel}>
            <input
              type="checkbox"
              name="agree"
              checked={formData.agree}
              onChange={handleChange}
              className={styles.checkbox}
            />
            <span>
              –Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å –∑{" "}
              <a href="/policy" className={styles.link}>
                –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Å–∞–π—Ç—É Disfraz.com.
              </a>
            </span>
          </label>
          {errors.agree && <span className={styles.error}>{errors.agree}</span>}
        </div>
        <ButtonGeneral
          initial
          d√©rColor="#151515"
          text={isSubmitting ? "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è..." : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"}
          width="100%"
          height="3rem"
          textColor="#F2F2F2"
          type="submit"
          disabled={isSubmitting}
          link="/"
        />
        {serverMessage && (
          <div className={styles.serverMessage}>
            <span>{serverMessage}</span>
          </div>
        )}
        {serverError && (
          <div className={styles.serverError}>
            <span>{serverError}</span>
          </div>
        )}
      </form>
    </div>
  );
};

export default RegistrationForm;
